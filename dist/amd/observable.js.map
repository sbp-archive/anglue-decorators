{"version":3,"sources":["src/observable.js"],"names":[],"mappings":";;;;;;;;;;;QAAa,UAAU;AAyBR,iBAzBF,UAAU,CAyBP,QAAQ,EAAE;kCAzBb,UAAU;;AA0Bf,gBAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC5B;;qBA3BQ,UAAU;;iBA6BT,YAAG;AACT,oBAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AACf,wBAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;iBAC5B;AACD,uBAAO,IAAI,CAAC,OAAO,CAAC;aACvB;;;mBAEU,qBAAC,KAAK,EAAE,OAAO,EAAE;AACxB,oBAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACzB,oBAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;AAChB,0BAAM,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;iBAC7B;AACD,sBAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aAC9B;;;mBAEa,wBAAC,KAAK,EAAE,OAAO,EAAE;AAC3B,oBAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACzB,oBAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;AAChB,2BAAO;iBACV;AACD,sBAAM,UAAO,CAAC,OAAO,CAAC,CAAC;aAC1B;;;mBAEG,cAAC,KAAK,EAAE;AACR,oBAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACzB,oBAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;AAChB,2BAAO;iBACV;;AAED,oBAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;;;;AAC1C,yCAAoB,MAAM,CAAC,KAAK,CAAC,8HAAE;4BAA1B,OAAO;;AACZ,+BAAO,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;qBACtC;;;;;;;;;;;;;;;aACJ;;;mBA7Dc,kBAAC,QAAQ,EAAE;AACtB,oBAAI,UAAU,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC1C,sBAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE;AAC9B,8BAAU,EAAE;AACR,oCAAY,EAAE,KAAK;AACnB,gCAAQ,EAAE,KAAK;AACf,kCAAU,EAAE,KAAK;AACjB,6BAAK,EAAE,UAAU;qBACpB;AACD,wBAAM;AACF,6BAAK,EAAE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC;qBACjD;AACD,iCAAe;AACX,6BAAK,EAAE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC;qBACjD;AACD,oCAAkB;AACd,6BAAK,EAAE,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC;qBACpD;AACD,0BAAQ;AACJ,6BAAK,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;qBAC1C;iBACJ,CAAC,CAAC;aACN;;;eAvBQ,UAAU;;;YAAV,UAAU,GAAV,UAAU;yBAgER,UAAU","file":"src/observable.js","sourcesContent":["export class Observable {\n    static decorate(instance) {\n        var observable = new Observable(instance);\n        Object.defineProperties(instance, {\n            observable: {\n                configurable: false,\n                writable: false,\n                enumerable: false,\n                value: observable\n            },\n            'on': {\n                value: observable.addListener.bind(observable)\n            },\n            'addListener': {\n                value: observable.addListener.bind(observable)\n            },\n            'removeListener': {\n                value: observable.removeListener.bind(observable)\n            },\n            'emit': {\n                value: observable.emit.bind(observable)\n            }\n        });\n    }\n\n    constructor(instance) {\n        this.instance = instance;\n    }\n\n    get events() {\n        if (!this._events) {\n            this._events = new Map();\n        }\n        return this._events;\n    }\n\n    addListener(event, handler) {\n        var events = this.events;\n        if (!events[event]) {\n            events[event] = new Set();\n        }\n        events[event].add(handler);\n    }\n\n    removeListener(event, handler) {\n        var events = this.events;\n        if (!events[event]) {\n            return;\n        }\n        events.delete(handler);\n    }\n\n    emit(event) {\n        var events = this.events;\n        if (!events[event]) {\n            return;\n        }\n\n        var args = Array.from(arguments).slice(1);\n        for (let handler of events[event]) {\n            handler.apply(this.instance, args);\n        }\n    }\n}\nexport default Observable;\n"]}
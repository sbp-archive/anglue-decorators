{"version":3,"sources":["src/observable.js"],"names":[],"mappings":";;;;;;;;;;;QAAa,UAAU,WAAV,UAAU;AAyBR,iBAzBF,UAAU,CAyBP,QAAQ,EAAE;kCAzBb,UAAU;;AA0Bf,gBAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC5B;;qBA3BQ,UAAU;AA6Bf,kBAAM;qBAAA,YAAG;AACT,wBAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AACf,4BAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;qBAC5B;AACD,2BAAO,IAAI,CAAC,OAAO,CAAC;iBACvB;;AAED,uBAAW;uBAAA,qBAAC,KAAK,EAAE,OAAO,EAAE;AACxB,wBAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACzB,wBAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;AAChB,8BAAM,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;qBAC7B;AACD,0BAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;iBAC9B;;AAED,0BAAc;uBAAA,wBAAC,KAAK,EAAE,OAAO,EAAE;AAC3B,wBAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACzB,wBAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;AAChB,+BAAO;qBACV;AACD,0BAAM,UAAO,CAAC,OAAO,CAAC,CAAC;iBAC1B;;AAED,gBAAI;uBAAA,cAAC,KAAK,EAAE;AACR,wBAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACzB,wBAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;AAChB,+BAAO;qBACV;;AAED,wBAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;;;;AAC1C,6CAAoB,MAAM,CAAC,KAAK,CAAC;gCAAxB,OAAO;;AACZ,mCAAO,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;yBACtC;;;;;;;;;;;;;;;iBACJ;;;AA7DM,oBAAQ;uBAAA,kBAAC,QAAQ,EAAE;AACtB,wBAAI,UAAU,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC1C,0BAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE;AAC9B,kCAAU,EAAE;AACR,wCAAY,EAAE,KAAK;AACnB,oCAAQ,EAAE,KAAK;AACf,sCAAU,EAAE,KAAK;AACjB,iCAAK,EAAE,UAAU;yBACpB;AACD,4BAAM;AACF,iCAAK,EAAE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC;yBACjD;AACD,qCAAe;AACX,iCAAK,EAAE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC;yBACjD;AACD,wCAAkB;AACd,iCAAK,EAAE,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC;yBACpD;AACD,8BAAQ;AACJ,iCAAK,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;yBAC1C;qBACJ,CAAC,CAAC;iBACN;;;;eAvBQ,UAAU;;;yBAgER,UAAU","file":"src/observable.js","sourcesContent":["export class Observable {\n    static decorate(instance) {\n        var observable = new Observable(instance);\n        Object.defineProperties(instance, {\n            observable: {\n                configurable: false,\n                writable: false,\n                enumerable: false,\n                value: observable\n            },\n            'on': {\n                value: observable.addListener.bind(observable)\n            },\n            'addListener': {\n                value: observable.addListener.bind(observable)\n            },\n            'removeListener': {\n                value: observable.removeListener.bind(observable)\n            },\n            'emit': {\n                value: observable.emit.bind(observable)\n            }\n        });\n    }\n\n    constructor(instance) {\n        this.instance = instance;\n    }\n\n    get events() {\n        if (!this._events) {\n            this._events = new Map();\n        }\n        return this._events;\n    }\n\n    addListener(event, handler) {\n        var events = this.events;\n        if (!events[event]) {\n            events[event] = new Set();\n        }\n        events[event].add(handler);\n    }\n\n    removeListener(event, handler) {\n        var events = this.events;\n        if (!events[event]) {\n            return;\n        }\n        events.delete(handler);\n    }\n\n    emit(event) {\n        var events = this.events;\n        if (!events[event]) {\n            return;\n        }\n\n        var args = Array.from(arguments).slice(1);\n        for (let handler of events[event]) {\n            handler.apply(this.instance, args);\n        }\n    }\n}\nexport default Observable;\n"]}
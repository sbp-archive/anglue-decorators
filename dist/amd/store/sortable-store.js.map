{"version":3,"sources":["src/store/sortable-store.js"],"names":[],"mappings":";;;;;;;;;;;;;;;QAAO,cAAc;;QAER,sBAAsB,WAAtB,sBAAsB;AAsBpB,iBAtBF,sBAAsB,CAsBnB,KAAK,EAAE;kCAtBV,sBAAsB;;AAuB3B,gBAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,gBAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;SAC5B;;qBAzBQ,sBAAsB;AA2B/B,0BAAc;uBAAA,0BAAG;AACb,wBAAI,CAAC,MAAM,EAAE,CAAC;iBACjB;;AAED,kBAAM;uBAAA,kBAAG;AACL,wBAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;;;;;;AAC9B,6CAA0B,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;;;gCAAtC,GAAG;gCAAE,MAAM;;AACjB,kCAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;yBAC3B;;;;;;;;;;;;;;;;AACD,wBAAI,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;AAC1B,wBAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;iBACpC;;AAED,wBAAY;uBAAA,sBAAC,QAAQ,EAAE;;;wBAEf,QAAQ,GAER,QAAQ,CAFR,QAAQ;wBACR,OAAO,GACP,QAAQ,CADR,OAAO;;AAGX,wBAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAC,KAAK,EAAK;AAClC,+BAAO,MAAK,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,QAAQ,EACtD,OAAO,CAAC,CAAC;qBAChB,CAAC,CAAC;;;;AAIH,wBAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;iBAC/B;;AAED,yBAAa;uBAAA,yBAAG,EAAE;;;AAvDX,yBAAa;uBAAA,uBAAC,GAAG,EAAE;AACtB,kCAAc,CAAC,aAAa,CAAC,GAAG,EAAE;AAC9B,uCAAiB,SAAS;qBAC7B,CAAC,CAAC;iBACN;;AAEM,oBAAQ;uBAAA,kBAAC,KAAK,EAAE;AACnB,wBAAI,QAAQ,GAAG,IAAI,sBAAsB,CAAC,KAAK,CAAC,CAAC;;AAEjD,0BAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE;AAC3B,gCAAQ,EAAE;AACN,iCAAK,EAAE,QAAQ;yBAClB;qBACJ,CAAC,CAAC;;AAEH,kCAAc,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACpD,kCAAc,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;AAC1D,kCAAc,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC;AAC3D,kCAAc,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;iBAC/D;;;;eApBQ,sBAAsB;;;yBA2DpB,sBAAsB","file":"src/store/sortable-store.js","sourcesContent":["import DecoratorUtils from '../utils';\n\nexport class SortableStoreDecorator {\n    static decorateClass(cls) {\n        DecoratorUtils.addInjections(cls, {\n            'filterService': '$filter'\n        });\n    }\n\n    static decorate(owner) {\n        var sortable = new SortableStoreDecorator(owner);\n\n        Object.defineProperties(owner, {\n            sortable: {\n                value: sortable\n            }\n        });\n\n        DecoratorUtils.intercept(owner, sortable, 'doSort');\n        DecoratorUtils.intercept(owner, sortable, 'onSortChange');\n        DecoratorUtils.intercept(owner, sortable, 'onItemsSorted');\n        DecoratorUtils.intercept(owner, sortable, 'onItemsChanged');\n    }\n\n    constructor(owner) {\n        this.owner = owner;\n        this.sorters = new Map();\n    }\n\n    onItemsChanged() {\n        this.doSort();\n    }\n\n    doSort() {\n        var sorted = this.owner.items;\n        for (let [key, sortFn] of this.sorters.entries()) {\n            sorted = sortFn(sorted);\n        }\n        this.owner.items = sorted;\n        this.owner.onItemsSorted(sorted);\n    }\n\n    onSortChange(sortInfo) {\n        var {\n            property,\n            reverse\n        } = sortInfo;\n\n        this.sorters.set('__sort', (items) => {\n            return this.owner.filterService('orderBy')(items, property,\n                reverse);\n        });\n\n        // We have to go through onItemsChanged so that other decorators can react\n        // to this as well.\n        this.owner.onItemsChanged();\n    }\n\n    onItemsSorted() {}\n}\n\nexport default SortableStoreDecorator;\n"]}